Creating a dev log for this project to track where it's at and my plans/ideas;

As of today (8/29/24), we have:

- working cube class w/ rotation transformation working (can render 3d)
- point, line, quadrilateral classes all working 
- matrix class w/ multiplication and other matrix ops working
- color working for all shapes

ideas for now/needed improvements:

- refactor Screen class; specifically how points are drawn to screen:
    - we don't want to have to manually clear/update points that we draw at each frame
    - instead, could we have a vector of shapes that are currently in the scene (this would require a Shape class that parent's all more specifically defined shapes)
    - at each frame, we loop thru vector of shapes and render their points
    - that way, when a shape is updated (transformed), we don't have to do any additional work on the Screen side of things
    - this approach is some aids when it comes to pointers and refs; need to keep working on

- add projection for points (so z coord determines how far they are from the viewer and thus scales x/y accordingly)

- (INSIGNIFICANT) add additional constructor to rectangle/square class that takes center and length/width as params; then defines four paints based on these params



Notes as of 9/1
WORKING NOW
- cuboid class w/ rotation etc
- updated other classes (most importantly projection and coordinate normalization working in Point class)
- new triangle class
- culling exists but not working


Plan of attack 9/5 (haven't worked on much in last few days)
NEXT UP
- extend Cuboid s.t it can be made up of triangles (for easier time w/ culling and such)
    - inshallah this is the key to fix culling

- FIX CULLING; ISOLATE THE PROBLEM (HAS TO BE SOME MATH)
    - manually calculate normals for plane to 
    - 

- clean up old comments and make new clear comments
- filling shapes (not just wireframe rendering)
- lighting (s.t filled shapes are 3d distinguishable)
- refactor Screen class to optimize rendering flow (longer term, need to read up on this)



FOUND CULLING ISSUE: 
    - IF WE TURN PROJECTION OFF, CULLING WORKS (IF WE ADD NORMALIZED Z TO THE DENOMINATOR OF PROJECTION SCALE)
    - 


Notes as of 9/2
- CULLING SEEMS TO WORK NOW; (NOT SURE PRECISELY WHY, FIX WAS JUST A MATTER OF ALTERNATING CONFIGURATION OF HOW COORDINATES WERE (OR WERE NOT) NORMALIZED THRUOUT RENDERING PIPELINE

ACTION ITEMS:
    - DESPARATELY NEED TO CLEAN UP CODE
    - figure out why culling works now; understand configuration of pipeline
    - add method to render filled shapes (DEBUG AND FIX THIS METHOD; IT'S TWEAKING, )
        - maybe we could use ray-casting to just gets points between 4-vertex face; try this approach soon
    - add basic lighting


Notes as of 9/10

- cullings works
- have a method that does work for getting solid points BUT it's extremely non performant (if cuboid is too large, rotation is too fast, or any other
condition that leads to more processing, shit gets bad)
- have basic lighting working

To-do
- re-write Line to use SDL_DrawLine (will prob b way more optimized BUT DONT NECESSARILY NEED) 
- 

Notes as of 9/11
- culling works
- fixed getting of solid points s.t no more missing pixels and more performant (key is that we project vertices first, then check bounding box of a face in 2d screen space)
- basic lighting works
- NEXT UP: add notion of camera + basic camera movement
    - logically: we have to transform every object in the screen according to our current camera position
    - read into how this is usually done

